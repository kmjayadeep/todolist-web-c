name: Build Docker image using Nix and push to ghcr

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  # Various checks
  check:
    runs-on: ubuntu-22.04
    steps:
      - name: git checkout
        uses: actions/checkout@v3
      - name: Check Nixpkgs inputs
        uses: DeterminateSystems/flake-checker-action@main
        with:
          fail-mode: true

  # Build the Docker image using Nix
  build:
    # We need to use this machine type (x86_64-linux in Nix) or else the
    # Nix-built Docker image won't run properly
    runs-on: ubuntu-22.04
    environment: build
    steps:
      - name: git checkout
        uses: actions/checkout@v3

      # Install Nix and set up a local Nix store under /nix/store
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      # Cache any artifacts that aren't already cached at https://cache.nixos.org
      - name: Enable magic Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      # Note that we use Nix to build the Docker image and NOT the Docker CLI
      - name: Build Docker image for horoscope service using Nix
        run: nix build ".#docker"

      # We need to log into the GitHub Container Registry in order to push images
      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # No tag is provided in the Nix build configuration for our Docker image.
      # When no tag is provided, Nix generates one for you based on the contents
      # of the build inputs. This ensures that the image tag changes any time
      # any aspect of the build changes (even one character in one file). In
      # this CI step, the image is loaded, the image tag is inferred from the
      # build output, and then that tag is saved to the CI environment under the
      # IMAGE_TAG environment variable (used later during deployment).
      - name: Load and push image to GHCR
        run: |
          export IMAGE_TAG=$(docker load < result | grep -Po 'Loaded image: \K.*')
          echo "Pushing image ${IMAGE_TAG} to GHCR"
          docker push "${IMAGE_TAG}"
          # For image automation, we need incremental verion numbers
          export NEW_TAG="ghcr.io/kmjayadeep/todolist-web-c:$(date +%s)"
          docker tag "${IMAGE_TAG}" "${NEW_TAG}"
          docker push "${NEW_TAG}"
